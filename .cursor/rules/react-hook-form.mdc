---
description:
globs:
alwaysApply: false
---
# React Hook Form Development Rules

## Core Setup

### Basic Form Setup
```tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

// Define validation schema
const FormSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email address'),
  age: z.number().min(18, 'Must be at least 18 years old'),
})

type FormData = z.infer<typeof FormSchema>

export function BasicForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<FormData>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      name: '',
      email: '',
      age: 18,
    },
  })

  const onSubmit = async (data: FormData) => {
    try {
      const response = await fetch('/api/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      })
      
      if (response.ok) {
        reset() // Reset form on success
      }
    } catch (error) {
      console.error('Form submission error:', error)
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label htmlFor="name">Name</label>
        <input
          id="name"
          {...register('name')}
          className="border rounded px-3 py-2"
        />
        {errors.name && (
          <p className="text-red-500 text-sm">{errors.name.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="email">Email</label>
        <input
          id="email"
          type="email"
          {...register('email')}
          className="border rounded px-3 py-2"
        />
        {errors.email && (
          <p className="text-red-500 text-sm">{errors.email.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="age">Age</label>
        <input
          id="age"
          type="number"
          {...register('age', { valueAsNumber: true })}
          className="border rounded px-3 py-2"
        />
        {errors.age && (
          <p className="text-red-500 text-sm">{errors.age.message}</p>
        )}
      </div>

      <button
        type="submit"
        disabled={isSubmitting}
        className="bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  )
}
```

## Advanced Form Patterns

### Complex Form with Nested Objects
```tsx
import { useForm, useFieldArray } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const AddressSchema = z.object({
  street: z.string().min(1, 'Street is required'),
  city: z.string().min(1, 'City is required'),
  state: z.string().min(2, 'State must be at least 2 characters'),
  zipCode: z.string().regex(/^\d{5}(-\d{4})?$/, 'Invalid zip code'),
})

const PhoneSchema = z.object({
  type: z.enum(['home', 'work', 'mobile']),
  number: z.string().regex(/^\+?[\d\s-()]+$/, 'Invalid phone number'),
})

const UserSchema = z.object({
  personalInfo: z.object({
    firstName: z.string().min(1, 'First name is required'),
    lastName: z.string().min(1, 'Last name is required'),
    email: z.string().email('Invalid email'),
    dateOfBirth: z.string().min(1, 'Date of birth is required'),
  }),
  address: AddressSchema,
  phoneNumbers: z.array(PhoneSchema).min(1, 'At least one phone number is required'),
  preferences: z.object({
    newsletter: z.boolean(),
    notifications: z.boolean(),
    theme: z.enum(['light', 'dark', 'auto']),
  }),
})

type UserFormData = z.infer<typeof UserSchema>

export function ComplexUserForm() {
  const {
    register,
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
  } = useForm<UserFormData>({
    resolver: zodResolver(UserSchema),
    defaultValues: {
      personalInfo: {
        firstName: '',
        lastName: '',
        email: '',
        dateOfBirth: '',
      },
      address: {
        street: '',
        city: '',
        state: '',
        zipCode: '',
      },
      phoneNumbers: [{ type: 'mobile', number: '' }],
      preferences: {
        newsletter: false,
        notifications: true,
        theme: 'auto',
      },
    },
  })

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'phoneNumbers',
  })

  const onSubmit = async (data: UserFormData) => {
    console.log('Form data:', data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Personal Information */}
      <section>
        <h2 className="text-lg font-semibold mb-4">Personal Information</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>First Name</label>
            <input
              {...register('personalInfo.firstName')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.personalInfo?.firstName && (
              <p className="text-red-500 text-sm">
                {errors.personalInfo.firstName.message}
              </p>
            )}
          </div>

          <div>
            <label>Last Name</label>
            <input
              {...register('personalInfo.lastName')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.personalInfo?.lastName && (
              <p className="text-red-500 text-sm">
                {errors.personalInfo.lastName.message}
              </p>
            )}
          </div>

          <div>
            <label>Email</label>
            <input
              type="email"
              {...register('personalInfo.email')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.personalInfo?.email && (
              <p className="text-red-500 text-sm">
                {errors.personalInfo.email.message}
              </p>
            )}
          </div>

          <div>
            <label>Date of Birth</label>
            <input
              type="date"
              {...register('personalInfo.dateOfBirth')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.personalInfo?.dateOfBirth && (
              <p className="text-red-500 text-sm">
                {errors.personalInfo.dateOfBirth.message}
              </p>
            )}
          </div>
        </div>
      </section>

      {/* Address */}
      <section>
        <h2 className="text-lg font-semibold mb-4">Address</h2>
        <div className="grid grid-cols-2 gap-4">
          <div className="col-span-2">
            <label>Street Address</label>
            <input
              {...register('address.street')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.address?.street && (
              <p className="text-red-500 text-sm">{errors.address.street.message}</p>
            )}
          </div>

          <div>
            <label>City</label>
            <input
              {...register('address.city')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.address?.city && (
              <p className="text-red-500 text-sm">{errors.address.city.message}</p>
            )}
          </div>

          <div>
            <label>State</label>
            <input
              {...register('address.state')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.address?.state && (
              <p className="text-red-500 text-sm">{errors.address.state.message}</p>
            )}
          </div>

          <div>
            <label>Zip Code</label>
            <input
              {...register('address.zipCode')}
              className="border rounded px-3 py-2 w-full"
            />
            {errors.address?.zipCode && (
              <p className="text-red-500 text-sm">{errors.address.zipCode.message}</p>
            )}
          </div>
        </div>
      </section>

      {/* Phone Numbers */}
      <section>
        <h2 className="text-lg font-semibold mb-4">Phone Numbers</h2>
        {fields.map((field, index) => (
          <div key={field.id} className="flex gap-4 mb-4">
            <select
              {...register(`phoneNumbers.${index}.type`)}
              className="border rounded px-3 py-2"
            >
              <option value="mobile">Mobile</option>
              <option value="home">Home</option>
              <option value="work">Work</option>
            </select>

            <input
              {...register(`phoneNumbers.${index}.number`)}
              placeholder="Phone number"
              className="border rounded px-3 py-2 flex-1"
            />

            <button
              type="button"
              onClick={() => remove(index)}
              className="bg-red-500 text-white px-3 py-2 rounded"
              disabled={fields.length === 1}
            >
              Remove
            </button>
          </div>
        ))}

        <button
          type="button"
          onClick={() => append({ type: 'mobile', number: '' })}
          className="bg-green-500 text-white px-4 py-2 rounded"
        >
          Add Phone Number
        </button>
      </section>

      {/* Preferences */}
      <section>
        <h2 className="text-lg font-semibold mb-4">Preferences</h2>
        <div className="space-y-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              {...register('preferences.newsletter')}
              className="mr-2"
            />
            Subscribe to newsletter
          </label>

          <label className="flex items-center">
            <input
              type="checkbox"
              {...register('preferences.notifications')}
              className="mr-2"
            />
            Enable notifications
          </label>

          <div>
            <label>Theme</label>
            <select
              {...register('preferences.theme')}
              className="border rounded px-3 py-2 ml-2"
            >
              <option value="light">Light</option>
              <option value="dark">Dark</option>
              <option value="auto">Auto</option>
            </select>
          </div>
        </div>
      </section>

      <button
        type="submit"
        disabled={isSubmitting}
        className="bg-blue-500 text-white px-6 py-3 rounded disabled:opacity-50"
      >
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  )
}
```

## Dynamic Forms with Field Arrays

### Dynamic Task List Form
```tsx
import { useForm, useFieldArray, Control } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const TaskSchema = z.object({
  title: z.string().min(1, 'Task title is required'),
  description: z.string().optional(),
  priority: z.enum(['low', 'medium', 'high']),
  dueDate: z.string().optional(),
  completed: z.boolean().default(false),
})

const ProjectSchema = z.object({
  name: z.string().min(1, 'Project name is required'),
  description: z.string().optional(),
  tasks: z.array(TaskSchema).min(1, 'At least one task is required'),
})

type ProjectFormData = z.infer<typeof ProjectSchema>

// Task Item Component
function TaskItem({ 
  control, 
  index, 
  onRemove 
}: { 
  control: Control<ProjectFormData>
  index: number
  onRemove: () => void 
}) {
  const { register, formState: { errors } } = useForm<ProjectFormData>()

  return (
    <div className="border rounded-lg p-4 space-y-4">
      <div className="flex justify-between items-start">
        <h3 className="font-medium">Task {index + 1}</h3>
        <button
          type="button"
          onClick={onRemove}
          className="text-red-500 hover:text-red-700"
        >
          Remove
        </button>
      </div>

      <div>
        <label>Title</label>
        <input
          {...register(`tasks.${index}.title`)}
          className="border rounded px-3 py-2 w-full"
          placeholder="Task title"
        />
        {errors.tasks?.[index]?.title && (
          <p className="text-red-500 text-sm">
            {errors.tasks[index]?.title?.message}
          </p>
        )}
      </div>

      <div>
        <label>Description</label>
        <textarea
          {...register(`tasks.${index}.description`)}
          className="border rounded px-3 py-2 w-full"
          placeholder="Task description (optional)"
          rows={3}
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label>Priority</label>
          <select
            {...register(`tasks.${index}.priority`)}
            className="border rounded px-3 py-2 w-full"
          >
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>

        <div>
          <label>Due Date</label>
          <input
            type="date"
            {...register(`tasks.${index}.dueDate`)}
            className="border rounded px-3 py-2 w-full"
          />
        </div>
      </div>

      <label className="flex items-center">
        <input
          type="checkbox"
          {...register(`tasks.${index}.completed`)}
          className="mr-2"
        />
        Mark as completed
      </label>
    </div>
  )
}

export function ProjectForm() {
  const {
    register,
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<ProjectFormData>({
    resolver: zodResolver(ProjectSchema),
    defaultValues: {
      name: '',
      description: '',
      tasks: [
        {
          title: '',
          description: '',
          priority: 'medium',
          dueDate: '',
          completed: false,
        },
      ],
    },
  })

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'tasks',
  })

  const onSubmit = async (data: ProjectFormData) => {
    console.log('Project data:', data)
  }

  const addTask = () => {
    append({
      title: '',
      description: '',
      priority: 'medium',
      dueDate: '',
      completed: false,
    })
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-4xl mx-auto space-y-6">
      {/* Project Details */}
      <section className="bg-gray-50 p-6 rounded-lg">
        <h2 className="text-xl font-semibold mb-4">Project Details</h2>
        
        <div className="space-y-4">
          <div>
            <label>Project Name</label>
            <input
              {...register('name')}
              className="border rounded px-3 py-2 w-full"
              placeholder="Enter project name"
            />
            {errors.name && (
              <p className="text-red-500 text-sm">{errors.name.message}</p>
            )}
          </div>

          <div>
            <label>Description</label>
            <textarea
              {...register('description')}
              className="border rounded px-3 py-2 w-full"
              placeholder="Project description (optional)"
              rows={4}
            />
          </div>
        </div>
      </section>

      {/* Tasks */}
      <section>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Tasks</h2>
          <button
            type="button"
            onClick={addTask}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Add Task
          </button>
        </div>

        <div className="space-y-4">
          {fields.map((field, index) => (
            <TaskItem
              key={field.id}
              control={control}
              index={index}
              onRemove={() => remove(index)}
            />
          ))}
        </div>

        {errors.tasks && (
          <p className="text-red-500 text-sm mt-2">
            {errors.tasks.message || 'Please check task information'}
          </p>
        )}
      </section>

      <div className="flex justify-end space-x-4">
        <button
          type="button"
          className="px-6 py-3 border border-gray-300 rounded hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
        >
          {isSubmitting ? 'Creating Project...' : 'Create Project'}
        </button>
      </div>
    </form>
  )
}
```

## Form Validation & Error Handling

### Custom Validation Hooks
```tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { useState } from 'react'

// Custom async validation
const checkEmailAvailability = async (email: string): Promise<boolean> => {
  const response = await fetch(`/api/check-email?email=${encodeURIComponent(email)}`)
  const data = await response.json()
  return data.available
}

const RegistrationSchema = z.object({
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(20, 'Username must be less than 20 characters')
    .regex(/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores'),
  email: z.string().email('Invalid email address'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
})

type RegistrationData = z.infer<typeof RegistrationSchema>

export function RegistrationForm() {
  const [emailCheckStatus, setEmailCheckStatus] = useState<'idle' | 'checking' | 'available' | 'taken'>('idle')
  
  const {
    register,
    handleSubmit,
    watch,
    setError,
    clearErrors,
    formState: { errors, isSubmitting, isValid },
  } = useForm<RegistrationData>({
    resolver: zodResolver(RegistrationSchema),
    mode: 'onChange', // Validate on change for better UX
  })

  const emailValue = watch('email')

  // Debounced email check
  React.useEffect(() => {
    if (!emailValue || !z.string().email().safeParse(emailValue).success) {
      setEmailCheckStatus('idle')
      return
    }

    const timeoutId = setTimeout(async () => {
      setEmailCheckStatus('checking')
      try {
        const isAvailable = await checkEmailAvailability(emailValue)
        if (isAvailable) {
          setEmailCheckStatus('available')
          clearErrors('email')
        } else {
          setEmailCheckStatus('taken')
          setError('email', {
            type: 'manual',
            message: 'This email is already registered'
          })
        }
      } catch (error) {
        setEmailCheckStatus('idle')
        setError('email', {
          type: 'manual',
          message: 'Unable to verify email availability'
        })
      }
    }, 500)

    return () => clearTimeout(timeoutId)
  }, [emailValue, setError, clearErrors])

  const onSubmit = async (data: RegistrationData) => {
    if (emailCheckStatus === 'taken') {
      return
    }

    try {
      const response = await fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      })

      if (!response.ok) {
        const errorData = await response.json()
        
        // Handle specific field errors
        if (errorData.fieldErrors) {
          Object.entries(errorData.fieldErrors).forEach(([field, message]) => {
            setError(field as keyof RegistrationData, {
              type: 'server',
              message: message as string,
            })
          })
        } else {
          setError('root', {
            type: 'server',
            message: errorData.message || 'Registration failed',
          })
        }
      } else {
        // Registration successful
        window.location.href = '/welcome'
      }
    } catch (error) {
      setError('root', {
        type: 'network',
        message: 'Network error. Please try again.',
      })
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-md mx-auto space-y-4">
      <div>
        <label>Username</label>
        <input
          {...register('username')}
          className={`border rounded px-3 py-2 w-full ${
            errors.username ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder="Choose a username"
        />
        {errors.username && (
          <p className="text-red-500 text-sm mt-1">{errors.username.message}</p>
        )}
      </div>

      <div>
        <label>Email</label>
        <div className="relative">
          <input
            {...register('email')}
            type="email"
            className={`border rounded px-3 py-2 w-full pr-10 ${
              errors.email 
                ? 'border-red-500' 
                : emailCheckStatus === 'available' 
                ? 'border-green-500' 
                : 'border-gray-300'
            }`}
            placeholder="Enter your email"
          />
          
          {/* Email check indicator */}
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
            {emailCheckStatus === 'checking' && (
              <div className="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full" />
            )}
            {emailCheckStatus === 'available' && (
              <div className="text-green-500">✓</div>
            )}
            {emailCheckStatus === 'taken' && (
              <div className="text-red-500">✗</div>
            )}
          </div>
        </div>
        
        {errors.email && (
          <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
        )}
        {emailCheckStatus === 'available' && !errors.email && (
          <p className="text-green-500 text-sm mt-1">Email is available!</p>
        )}
      </div>

      <div>
        <label>Password</label>
        <input
          {...register('password')}
          type="password"
          className={`border rounded px-3 py-2 w-full ${
            errors.password ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder="Create a password"
        />
        {errors.password && (
          <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>
        )}
      </div>

      <div>
        <label>Confirm Password</label>
        <input
          {...register('confirmPassword')}
          type="password"
          className={`border rounded px-3 py-2 w-full ${
            errors.confirmPassword ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder="Confirm your password"
        />
        {errors.confirmPassword && (
          <p className="text-red-500 text-sm mt-1">{errors.confirmPassword.message}</p>
        )}
      </div>

      {errors.root && (
        <div className="bg-red-50 border border-red-200 rounded p-3">
          <p className="text-red-700 text-sm">{errors.root.message}</p>
        </div>
      )}

      <button
        type="submit"
        disabled={isSubmitting || !isValid || emailCheckStatus === 'taken'}
        className="w-full bg-blue-500 text-white py-3 rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isSubmitting ? 'Creating Account...' : 'Create Account'}
      </button>
    </form>
  )
}
```

## Integration with UI Libraries

### Shadcn/ui Integration
```tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'

const ContactFormSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  subject: z.string().min(5, 'Subject must be at least 5 characters'),
  category: z.string().min(1, 'Please select a category'),
  message: z.string().min(10, 'Message must be at least 10 characters'),
  urgent: z.boolean().default(false),
  subscribe: z.boolean().default(false),
})

type ContactFormData = z.infer<typeof ContactFormSchema>

export function ContactForm() {
  const form = useForm<ContactFormData>({
    resolver: zodResolver(ContactFormSchema),
    defaultValues: {
      name: '',
      email: '',
      subject: '',
      category: '',
      message: '',
      urgent: false,
      subscribe: false,
    },
  })

  const onSubmit = async (data: ContactFormData) => {
    console.log('Contact form data:', data)
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Your name" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input type="email" placeholder="your@email.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="category"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Category</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a category" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="support">Technical Support</SelectItem>
                  <SelectItem value="billing">Billing</SelectItem>
                  <SelectItem value="feedback">Feedback</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="subject"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Subject</FormLabel>
              <FormControl>
                <Input placeholder="Brief description of your inquiry" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Message</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Please provide details about your inquiry"
                  className="min-h-[120px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="urgent"
          render={({ field }) => (
            <FormItem className="flex flex-row items-start space-x-3 space-y-0">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <div className="space-y-1 leading-none">
                <FormLabel>Urgent</FormLabel>
                <FormDescription>
                  Mark this as urgent if you need immediate assistance
                </FormDescription>
              </div>
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="subscribe"
          render={({ field }) => (
            <FormItem className="flex flex-row items-start space-x-3 space-y-0">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <div className="space-y-1 leading-none">
                <FormLabel>Subscribe to newsletter</FormLabel>
                <FormDescription>
                  Get updates about new features and announcements
                </FormDescription>
              </div>
            </FormItem>
          )}
        />

        <Button 
          type="submit" 
          disabled={form.formState.isSubmitting}
          className="w-full"
        >
          {form.formState.isSubmitting ? 'Sending...' : 'Send Message'}
        </Button>
      </form>
    </Form>
  )
}
```

## Custom Hooks & Utilities

### Reusable Form Hook
```tsx
import { useForm, UseFormProps } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { useState } from 'react'

interface UseFormWithSubmissionOptions<T extends z.ZodSchema> extends UseFormProps<z.infer<T>> {
  schema: T
  onSubmit: (data: z.infer<T>) => Promise<void>
  onSuccess?: () => void
  onError?: (error: unknown) => void
}

export function useFormWithSubmission<T extends z.ZodSchema>({
  schema,
  onSubmit,
  onSuccess,
  onError,
  ...formOptions
}: UseFormWithSubmissionOptions<T>) {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitError, setSubmitError] = useState<string | null>(null)

  const form = useForm<z.infer<T>>({
    resolver: zodResolver(schema),
    ...formOptions,
  })

  const handleSubmit = async (data: z.infer<T>) => {
    setIsSubmitting(true)
    setSubmitError(null)

    try {
      await onSubmit(data)
      onSuccess?.()
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An error occurred'
      setSubmitError(errorMessage)
      onError?.(error)
    } finally {
      setIsSubmitting(false)
    }
  }

  return {
    ...form,
    handleSubmit: form.handleSubmit(handleSubmit),
    isSubmitting,
    submitError,
    clearSubmitError: () => setSubmitError(null),
  }
}

// Usage example
const LoginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(1, 'Password is required'),
})

export function LoginForm() {
  const {
    register,
    handleSubmit,
    formState: { errors },
    isSubmitting,
    submitError,
  } = useFormWithSubmission({
    schema: LoginSchema,
    onSubmit: async (data) => {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      })
      
      if (!response.ok) {
        throw new Error('Login failed')
      }
    },
    onSuccess: () => {
      window.location.href = '/dashboard'
    },
  })

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <input
          {...register('email')}
          type="email"
          placeholder="Email"
          className="border rounded px-3 py-2 w-full"
        />
        {errors.email && (
          <p className="text-red-500 text-sm">{errors.email.message}</p>
        )}
      </div>

      <div>
        <input
          {...register('password')}
          type="password"
          placeholder="Password"
          className="border rounded px-3 py-2 w-full"
        />
        {errors.password && (
          <p className="text-red-500 text-sm">{errors.password.message}</p>
        )}
      </div>

      {submitError && (
        <div className="bg-red-50 border border-red-200 rounded p-3">
          <p className="text-red-700 text-sm">{submitError}</p>
        </div>
      )}

      <button
        type="submit"
        disabled={isSubmitting}
        className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 disabled:opacity-50"
      >
        {isSubmitting ? 'Signing in...' : 'Sign In'}
      </button>
    </form>
  )
}
```

## Best Practices

1. **Use Zod for Validation**: Always combine React Hook Form with Zod for type-safe validation
2. **Performance Optimization**: Use `mode: 'onChange'` for real-time validation and better UX
3. **Error Handling**: Implement proper error handling for both client and server-side errors
4. **Field Arrays**: Use `useFieldArray` for dynamic form fields and complex data structures
5. **Custom Components**: Create reusable form components with proper prop forwarding
6. **Async Validation**: Implement debounced async validation for real-time checks
7. **Form State Management**: Use form state effectively with `watch`, `setValue`, and `reset`
8. **Accessibility**: Ensure forms are accessible with proper labels and ARIA attributes
9. **Loading States**: Always provide feedback during form submission
10. **Server Integration**: Handle server validation errors and display them appropriately
