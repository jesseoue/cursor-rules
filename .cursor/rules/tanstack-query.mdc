---
description:
globs:
alwaysApply: false
---
# Tanstack Query Development Rules

## Core Setup

### Query Client Configuration
```typescript
// lib/react-query.ts
import { QueryClient } from '@tanstack/react-query'

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      retry: (failureCount, error) => {
        // Don't retry on 4xx errors except 429
        if (error?.status >= 400 && error?.status < 500 && error?.status !== 429) {
          return false
        }
        // Retry up to 3 times for other errors
        return failureCount < 3
      },
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
      refetchOnWindowFocus: false,
      refetchOnReconnect: true,
    },
    mutations: {
      retry: 1,
      onError: (error) => {
        console.error('Mutation error:', error)
      },
    },
  },
})
```

### Provider Setup
```tsx
// app/providers/query-provider.tsx
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { useState } from 'react'

export function QueryProvider({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(
    () => new QueryClient({
      defaultOptions: {
        queries: {
          staleTime: 5 * 60 * 1000,
          cacheTime: 10 * 60 * 1000,
          refetchOnWindowFocus: false,
        },
      },
    })
  )

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      {process.env.NODE_ENV === 'development' && (
        <ReactQueryDevtools initialIsOpen={false} />
      )}
    </QueryClientProvider>
  )
}
```

### Root Layout Integration
```tsx
// app/layout.tsx
import { QueryProvider } from '@/app/providers/query-provider'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <QueryProvider>
          {children}
        </QueryProvider>
      </body>
    </html>
  )
}
```

## Basic Queries

### Simple Data Fetching
```typescript
// hooks/use-users.ts
import { useQuery } from '@tanstack/react-query'

interface User {
  id: string
  name: string
  email: string
  avatar?: string
}

async function fetchUsers(): Promise<User[]> {
  const response = await fetch('/api/users')
  if (!response.ok) {
    throw new Error('Failed to fetch users')
  }
  return response.json()
}

export function useUsers() {
  return useQuery({
    queryKey: ['users'],
    queryFn: fetchUsers,
    staleTime: 5 * 60 * 1000, // 5 minutes
  })
}

// Usage in component
export function UsersList() {
  const { data: users, isLoading, error } = useUsers()

  if (isLoading) return <div>Loading users...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <div>
      {users?.map(user => (
        <div key={user.id} className="flex items-center space-x-3 p-4 border rounded">
          {user.avatar && (
            <img src={user.avatar} alt={user.name} className="w-10 h-10 rounded-full" />
          )}
          <div>
            <h3 className="font-medium">{user.name}</h3>
            <p className="text-gray-500">{user.email}</p>
          </div>
        </div>
      ))}
    </div>
  )
}
```

### Parameterized Queries
```typescript
// hooks/use-user.ts
import { useQuery } from '@tanstack/react-query'

interface User {
  id: string
  name: string
  email: string
  avatar?: string
  profile?: {
    bio: string
    location: string
    website?: string
  }
}

async function fetchUser(userId: string): Promise<User> {
  const response = await fetch(`/api/users/${userId}`)
  if (!response.ok) {
    if (response.status === 404) {
      throw new Error('User not found')
    }
    throw new Error('Failed to fetch user')
  }
  return response.json()
}

export function useUser(userId: string | undefined) {
  return useQuery({
    queryKey: ['users', userId],
    queryFn: () => fetchUser(userId!),
    enabled: !!userId, // Only run query if userId exists
    staleTime: 10 * 60 * 1000, // 10 minutes
    retry: (failureCount, error) => {
      // Don't retry on 404
      if (error?.message === 'User not found') return false
      return failureCount < 3
    },
  })
}

// Advanced query with filters
export function useUserPosts(userId: string, filters?: {
  published?: boolean
  category?: string
  limit?: number
}) {
  return useQuery({
    queryKey: ['users', userId, 'posts', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      if (filters?.published !== undefined) {
        params.append('published', filters.published.toString())
      }
      if (filters?.category) {
        params.append('category', filters.category)
      }
      if (filters?.limit) {
        params.append('limit', filters.limit.toString())
      }

      const response = await fetch(`/api/users/${userId}/posts?${params}`)
      if (!response.ok) throw new Error('Failed to fetch posts')
      return response.json()
    },
    enabled: !!userId,
    staleTime: 2 * 60 * 1000, // 2 minutes
  })
}
```

## Mutations

### Basic Mutations
```typescript
// hooks/use-create-user.ts
import { useMutation, useQueryClient } from '@tanstack/react-query'

interface CreateUserData {
  name: string
  email: string
  avatar?: string
}

interface User {
  id: string
  name: string
  email: string
  avatar?: string
  createdAt: string
}

async function createUser(userData: CreateUserData): Promise<User> {
  const response = await fetch('/api/users', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(userData),
  })
  
  if (!response.ok) {
    const error = await response.json()
    throw new Error(error.message || 'Failed to create user')
  }
  
  return response.json()
}

export function useCreateUser() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: createUser,
    onSuccess: (newUser) => {
      // Invalidate and refetch users list
      queryClient.invalidateQueries({ queryKey: ['users'] })
      
      // Optionally add the new user to the cache
      queryClient.setQueryData(['users', newUser.id], newUser)
      
      // Show success notification
      console.log('User created successfully:', newUser.name)
    },
    onError: (error) => {
      console.error('Failed to create user:', error)
      // Show error notification
    },
  })
}

// Usage in component
export function CreateUserForm() {
  const [formData, setFormData] = useState<CreateUserData>({
    name: '',
    email: '',
  })

  const createUserMutation = useCreateUser()

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    createUserMutation.mutate(formData, {
      onSuccess: () => {
        setFormData({ name: '', email: '' }) // Reset form
      },
    })
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <input
        type="text"
        placeholder="Name"
        value={formData.name}
        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
        className="border rounded px-3 py-2 w-full"
        required
      />
      
      <input
        type="email"
        placeholder="Email"
        value={formData.email}
        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
        className="border rounded px-3 py-2 w-full"
        required
      />

      <button
        type="submit"
        disabled={createUserMutation.isPending}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
      >
        {createUserMutation.isPending ? 'Creating...' : 'Create User'}
      </button>

      {createUserMutation.error && (
        <div className="text-red-500 text-sm">
          {createUserMutation.error.message}
        </div>
      )}
    </form>
  )
}
```

### Optimistic Updates
```typescript
// hooks/use-toggle-like.ts
import { useMutation, useQueryClient } from '@tanstack/react-query'

interface Post {
  id: string
  title: string
  content: string
  liked: boolean
  likesCount: number
}

async function toggleLike(postId: string): Promise<{ liked: boolean; likesCount: number }> {
  const response = await fetch(`/api/posts/${postId}/like`, {
    method: 'POST',
  })
  
  if (!response.ok) throw new Error('Failed to toggle like')
  return response.json()
}

export function useToggleLike() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: toggleLike,
    onMutate: async (postId) => {
      // Cancel any outgoing refetches
      await queryClient.cancelQueries({ queryKey: ['posts', postId] })

      // Snapshot the previous value
      const previousPost = queryClient.getQueryData<Post>(['posts', postId])

      // Optimistically update the cache
      if (previousPost) {
        queryClient.setQueryData<Post>(['posts', postId], {
          ...previousPost,
          liked: !previousPost.liked,
          likesCount: previousPost.liked 
            ? previousPost.likesCount - 1 
            : previousPost.likesCount + 1,
        })
      }

      // Return a context object with the snapshotted value
      return { previousPost }
    },
    onError: (err, postId, context) => {
      // If the mutation fails, rollback to the previous value
      if (context?.previousPost) {
        queryClient.setQueryData(['posts', postId], context.previousPost)
      }
    },
    onSuccess: (data, postId) => {
      // Update with the actual server response
      queryClient.setQueryData<Post>(['posts', postId], (old) => {
        if (!old) return old
        return {
          ...old,
          liked: data.liked,
          likesCount: data.likesCount,
        }
      })
    },
    onSettled: (data, error, postId) => {
      // Always refetch after error or success to ensure consistency
      queryClient.invalidateQueries({ queryKey: ['posts', postId] })
    },
  })
}
```

## Infinite Queries

### Infinite Scrolling
```typescript
// hooks/use-infinite-posts.ts
import { useInfiniteQuery } from '@tanstack/react-query'

interface Post {
  id: string
  title: string
  content: string
  author: {
    id: string
    name: string
    avatar?: string
  }
  createdAt: string
}

interface PostsResponse {
  posts: Post[]
  nextCursor?: string
  hasMore: boolean
}

async function fetchPosts({ 
  pageParam = undefined,
  category,
  search 
}: {
  pageParam?: string
  category?: string
  search?: string
}): Promise<PostsResponse> {
  const params = new URLSearchParams()
  if (pageParam) params.append('cursor', pageParam)
  if (category) params.append('category', category)
  if (search) params.append('search', search)

  const response = await fetch(`/api/posts?${params}`)
  if (!response.ok) throw new Error('Failed to fetch posts')
  return response.json()
}

export function useInfinitePosts(filters?: { 
  category?: string
  search?: string 
}) {
  return useInfiniteQuery({
    queryKey: ['posts', 'infinite', filters],
    queryFn: ({ pageParam }) => fetchPosts({ pageParam, ...filters }),
    getNextPageParam: (lastPage) => lastPage.nextCursor,
    initialPageParam: undefined as string | undefined,
    staleTime: 30 * 1000, // 30 seconds
  })
}

// Usage component with infinite scrolling
export function InfinitePostsList() {
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    error,
  } = useInfinitePosts()

  const observerRef = useRef<IntersectionObserver>()
  const lastPostElementRef = useCallback((node: HTMLDivElement | null) => {
    if (isFetchingNextPage) return
    if (observerRef.current) observerRef.current.disconnect()
    
    observerRef.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasNextPage) {
        fetchNextPage()
      }
    })
    
    if (node) observerRef.current.observe(node)
  }, [isFetchingNextPage, fetchNextPage, hasNextPage])

  if (isLoading) return <div>Loading posts...</div>
  if (error) return <div>Error: {error.message}</div>

  const allPosts = data?.pages.flatMap(page => page.posts) ?? []

  return (
    <div className="space-y-6">
      {allPosts.map((post, index) => (
        <article
          key={post.id}
          ref={index === allPosts.length - 1 ? lastPostElementRef : null}
          className="border rounded-lg p-6 bg-white shadow-sm"
        >
          <div className="flex items-center space-x-3 mb-4">
            {post.author.avatar && (
              <img
                src={post.author.avatar}
                alt={post.author.name}
                className="w-10 h-10 rounded-full"
              />
            )}
            <div>
              <h4 className="font-medium">{post.author.name}</h4>
              <time className="text-sm text-gray-500">
                {new Date(post.createdAt).toLocaleDateString()}
              </time>
            </div>
          </div>
          
          <h2 className="text-xl font-bold mb-2">{post.title}</h2>
          <p className="text-gray-700">{post.content}</p>
        </article>
      ))}

      {isFetchingNextPage && (
        <div className="flex justify-center py-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        </div>
      )}

      {!hasNextPage && allPosts.length > 0 && (
        <div className="text-center py-4 text-gray-500">
          No more posts to load
        </div>
      )}
    </div>
  )
}
```

## Advanced Patterns

### Dependent Queries
```typescript
// hooks/use-user-with-posts.ts
import { useQuery } from '@tanstack/react-query'

export function useUserWithPosts(userId: string | undefined) {
  // First query: Get user details
  const userQuery = useQuery({
    queryKey: ['users', userId],
    queryFn: () => fetchUser(userId!),
    enabled: !!userId,
  })

  // Second query: Get user's posts (depends on user query)
  const postsQuery = useQuery({
    queryKey: ['users', userId, 'posts'],
    queryFn: () => fetchUserPosts(userId!),
    enabled: !!userId && !!userQuery.data,
    staleTime: 2 * 60 * 1000,
  })

  return {
    user: userQuery.data,
    posts: postsQuery.data,
    isLoading: userQuery.isLoading || postsQuery.isLoading,
    error: userQuery.error || postsQuery.error,
    isSuccess: userQuery.isSuccess && postsQuery.isSuccess,
  }
}
```

### Parallel Queries
```typescript
// hooks/use-dashboard-data.ts
import { useQueries } from '@tanstack/react-query'

export function useDashboardData(userId: string) {
  const queries = useQueries({
    queries: [
      {
        queryKey: ['users', userId],
        queryFn: () => fetchUser(userId),
        staleTime: 5 * 60 * 1000,
      },
      {
        queryKey: ['users', userId, 'stats'],
        queryFn: () => fetchUserStats(userId),
        staleTime: 1 * 60 * 1000,
      },
      {
        queryKey: ['users', userId, 'recent-activity'],
        queryFn: () => fetchRecentActivity(userId),
        staleTime: 30 * 1000,
      },
      {
        queryKey: ['notifications'],
        queryFn: () => fetchNotifications(userId),
        staleTime: 10 * 1000,
      },
    ],
  })

  return {
    user: queries[0].data,
    stats: queries[1].data,
    recentActivity: queries[2].data,
    notifications: queries[3].data,
    isLoading: queries.some(query => query.isLoading),
    error: queries.find(query => query.error)?.error,
    isSuccess: queries.every(query => query.isSuccess),
  }
}
```

### Custom Query Hook with Cache Manipulation
```typescript
// hooks/use-posts-with-cache.ts
import { useQuery, useQueryClient } from '@tanstack/react-query'

export function usePostsWithCache() {
  const queryClient = useQueryClient()

  const query = useQuery({
    queryKey: ['posts'],
    queryFn: fetchPosts,
    staleTime: 5 * 60 * 1000,
  })

  // Helper functions for cache manipulation
  const addPost = (newPost: Post) => {
    queryClient.setQueryData<Post[]>(['posts'], (old) => {
      if (!old) return [newPost]
      return [newPost, ...old]
    })
  }

  const updatePost = (postId: string, updates: Partial<Post>) => {
    queryClient.setQueryData<Post[]>(['posts'], (old) => {
      if (!old) return old
      return old.map(post => 
        post.id === postId ? { ...post, ...updates } : post
      )
    })
  }

  const removePost = (postId: string) => {
    queryClient.setQueryData<Post[]>(['posts'], (old) => {
      if (!old) return old
      return old.filter(post => post.id !== postId)
    })
  }

  const invalidatePosts = () => {
    queryClient.invalidateQueries({ queryKey: ['posts'] })
  }

  const prefetchPost = (postId: string) => {
    queryClient.prefetchQuery({
      queryKey: ['posts', postId],
      queryFn: () => fetchPost(postId),
      staleTime: 5 * 60 * 1000,
    })
  }

  return {
    ...query,
    addPost,
    updatePost,
    removePost,
    invalidatePosts,
    prefetchPost,
  }
}
```

## Error Handling & Loading States

### Comprehensive Error Handling
```typescript
// hooks/use-posts-with-error-handling.ts
import { useQuery } from '@tanstack/react-query'
import { useState } from 'react'

interface APIError {
  message: string
  code: string
  status: number
}

export function usePostsWithErrorHandling() {
  const [retryCount, setRetryCount] = useState(0)

  const query = useQuery({
    queryKey: ['posts', 'with-error-handling'],
    queryFn: async (): Promise<Post[]> => {
      const response = await fetch('/api/posts')
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        const error: APIError = {
          message: errorData.message || 'Failed to fetch posts',
          code: errorData.code || 'FETCH_ERROR',
          status: response.status,
        }
        throw error
      }
      
      return response.json()
    },
    retry: (failureCount, error) => {
      const apiError = error as APIError
      
      // Don't retry on client errors (4xx) except rate limiting
      if (apiError.status >= 400 && apiError.status < 500 && apiError.status !== 429) {
        return false
      }
      
      // Retry up to 3 times for server errors
      return failureCount < 3
    },
    retryDelay: (attemptIndex) => {
      setRetryCount(attemptIndex)
      return Math.min(1000 * 2 ** attemptIndex, 30000)
    },
    staleTime: 5 * 60 * 1000,
  })

  const getErrorMessage = (error: unknown): string => {
    if (error && typeof error === 'object' && 'message' in error) {
      return (error as APIError).message
    }
    return 'An unexpected error occurred'
  }

  const isRetriableError = (error: unknown): boolean => {
    if (error && typeof error === 'object' && 'status' in error) {
      const status = (error as APIError).status
      return status >= 500 || status === 429
    }
    return true
  }

  return {
    ...query,
    retryCount,
    errorMessage: query.error ? getErrorMessage(query.error) : null,
    canRetry: query.error ? isRetriableError(query.error) : false,
  }
}

// Error Boundary Component
export function PostsWithErrorHandling() {
  const { 
    data: posts, 
    isLoading, 
    error, 
    refetch, 
    errorMessage, 
    canRetry,
    retryCount 
  } = usePostsWithErrorHandling()

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        <span className="ml-2">Loading posts...</span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
        <div className="text-red-800 mb-4">
          <h3 className="font-semibold mb-2">Failed to load posts</h3>
          <p className="text-sm">{errorMessage}</p>
          {retryCount > 0 && (
            <p className="text-xs mt-2">Retry attempt: {retryCount}</p>
          )}
        </div>
        
        {canRetry && (
          <button
            onClick={() => refetch()}
            className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
          >
            Try Again
          </button>
        )}
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {posts?.map(post => (
        <div key={post.id} className="border rounded-lg p-4">
          <h3 className="font-semibold">{post.title}</h3>
          <p className="text-gray-600">{post.content}</p>
        </div>
      ))}
    </div>
  )
}
```

## Best Practices

### Query Key Factory
```typescript
// lib/query-keys.ts
export const queryKeys = {
  users: {
    all: () => ['users'] as const,
    lists: () => [...queryKeys.users.all(), 'list'] as const,
    list: (filters: string) => [...queryKeys.users.lists(), { filters }] as const,
    details: () => [...queryKeys.users.all(), 'detail'] as const,
    detail: (id: string) => [...queryKeys.users.details(), id] as const,
    posts: (id: string) => [...queryKeys.users.detail(id), 'posts'] as const,
  },
  posts: {
    all: () => ['posts'] as const,
    lists: () => [...queryKeys.posts.all(), 'list'] as const,
    list: (filters: string) => [...queryKeys.posts.lists(), { filters }] as const,
    details: () => [...queryKeys.posts.all(), 'detail'] as const,
    detail: (id: string) => [...queryKeys.posts.details(), id] as const,
    infinite: (filters: string) => [...queryKeys.posts.all(), 'infinite', { filters }] as const,
  },
} as const

// Usage
export function useUser(userId: string) {
  return useQuery({
    queryKey: queryKeys.users.detail(userId),
    queryFn: () => fetchUser(userId),
  })
}

export function useInvalidateUser(userId: string) {
  const queryClient = useQueryClient()
  
  return () => {
    queryClient.invalidateQueries({ 
      queryKey: queryKeys.users.detail(userId) 
    })
  }
}
```

### Type-Safe API Layer
```typescript
// lib/api.ts
interface APIResponse<T> {
  data: T
  success: boolean
  message?: string
}

class APIClient {
  private baseURL: string

  constructor(baseURL: string) {
    this.baseURL = baseURL
  }

  async request<T>(
    endpoint: string,
    options?: RequestInit
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`
    
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new Error(errorData.message || `HTTP ${response.status}`)
    }

    const result: APIResponse<T> = await response.json()
    return result.data
  }

  get<T>(endpoint: string) {
    return this.request<T>(endpoint)
  }

  post<T>(endpoint: string, data?: unknown) {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    })
  }

  put<T>(endpoint: string, data?: unknown) {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    })
  }

  delete<T>(endpoint: string) {
    return this.request<T>(endpoint, {
      method: 'DELETE',
    })
  }
}

export const api = new APIClient('/api')

// Typed API functions
export const userApi = {
  getUsers: () => api.get<User[]>('/users'),
  getUser: (id: string) => api.get<User>(`/users/${id}`),
  createUser: (data: CreateUserData) => api.post<User>('/users', data),
  updateUser: (id: string, data: Partial<User>) => api.put<User>(`/users/${id}`, data),
  deleteUser: (id: string) => api.delete<void>(`/users/${id}`),
}
```

## Performance Optimization

1. **Query Key Management**: Use structured query keys for efficient cache invalidation
2. **Stale Time Configuration**: Set appropriate stale times based on data volatility
3. **Optimistic Updates**: Implement optimistic updates for better perceived performance
4. **Infinite Queries**: Use infinite queries for large datasets with pagination
5. **Parallel Queries**: Use `useQueries` for fetching multiple independent queries
6. **Cache Prefetching**: Prefetch data for anticipated user interactions
7. **Error Boundaries**: Implement comprehensive error handling and recovery
8. **Memory Management**: Configure appropriate cache times to prevent memory leaks
9. **Network Optimization**: Implement retry strategies and request deduplication
10. **DevTools Integration**: Use React Query DevTools for debugging and monitoring
