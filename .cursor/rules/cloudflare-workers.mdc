---
description:
globs:
alwaysApply: false
---
---
rule_type: auto_attached
title: Cloudflare Workers Rules
description: Cloudflare Workers development patterns and edge computing
patterns: ["**/workers/**/*.{ts,js}", "**/worker.{ts,js}", "wrangler.toml", "**/cf-worker/**/*.{ts,js}"]
---

# Cloudflare Workers Rules

## Setup & Configuration

### Project Setup
```bash
# Install Wrangler CLI
npm install -g wrangler

# Create new Worker
wrangler generate my-worker
cd my-worker

# Login to Cloudflare
wrangler login

# Deploy Worker
wrangler deploy
```

### wrangler.toml Configuration
```toml
name = "my-worker"
main = "src/index.ts"
compatibility_date = "2024-01-01"
compatibility_flags = ["nodejs_compat"]

[env.production]
name = "my-worker"
vars = { ENVIRONMENT = "production" }

[env.staging]
name = "my-worker-staging"
vars = { ENVIRONMENT = "staging" }

# KV Bindings
[[kv_namespaces]]
binding = "MY_KV"
id = "your-kv-namespace-id"
preview_id = "your-kv-preview-id"

# D1 Database
[[d1_databases]]
binding = "DB"
database_name = "my-database"
database_id = "your-database-id"

# R2 Storage
[[r2_buckets]]
binding = "MY_BUCKET"
bucket_name = "my-bucket"

# Environment Variables
[vars]
API_KEY = "your-api-key"
DEBUG = "false"

# Secrets (set via CLI)
# wrangler secret put SECRET_KEY
```

## Basic Worker Structure

### TypeScript Worker
```typescript
// src/index.ts
export interface Env {
  MY_KV: KVNamespace
  DB: D1Database
  MY_BUCKET: R2Bucket
  API_KEY: string
  SECRET_KEY: string
}

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    const url = new URL(request.url)
    
    // CORS headers
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    }

    // Handle preflight requests
    if (request.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders })
    }

    try {
      switch (url.pathname) {
        case '/':
          return new Response('Hello World!', { headers: corsHeaders })
        
        case '/api/health':
          return Response.json({ status: 'ok', timestamp: Date.now() }, { headers: corsHeaders })
        
        case '/api/data':
          return handleDataRequest(request, env)
        
        default:
          return new Response('Not Found', { status: 404, headers: corsHeaders })
      }
    } catch (error) {
      return new Response('Internal Server Error', { status: 500, headers: corsHeaders })
    }
  },
}

async function handleDataRequest(request: Request, env: Env): Promise<Response> {
  if (request.method !== 'GET') {
    return new Response('Method Not Allowed', { status: 405 })
  }

  // Example KV usage
  const data = await env.MY_KV.get('example-key')
  
  return Response.json({ data })
}
```

### Request Routing
```typescript
// src/router.ts
export class Router {
  private routes: Map<string, (request: Request, env: Env) => Promise<Response>> = new Map()

  get(path: string, handler: (request: Request, env: Env) => Promise<Response>) {
    this.routes.set(`GET:${path}`, handler)
    return this
  }

  post(path: string, handler: (request: Request, env: Env) => Promise<Response>) {
    this.routes.set(`POST:${path}`, handler)
    return this
  }

  put(path: string, handler: (request: Request, env: Env) => Promise<Response>) {
    this.routes.set(`PUT:${path}`, handler)
    return this
  }

  delete(path: string, handler: (request: Request, env: Env) => Promise<Response>) {
    this.routes.set(`DELETE:${path}`, handler)
    return this
  }

  async handle(request: Request, env: Env): Promise<Response> {
    const url = new URL(request.url)
    const key = `${request.method}:${url.pathname}`
    
    const handler = this.routes.get(key)
    if (handler) {
      return handler(request, env)
    }

    return new Response('Not Found', { status: 404 })
  }
}

// Usage
const router = new Router()
  .get('/api/users', getUsersHandler)
  .post('/api/users', createUserHandler)
  .get('/api/users/:id', getUserHandler)

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    return router.handle(request, env)
  },
}
```

## KV Storage Operations

### Basic KV Operations
```typescript
// src/kv-service.ts
export class KVService {
  constructor(private kv: KVNamespace) {}

  async get<T>(key: string): Promise<T | null> {
    const value = await this.kv.get(key, 'json')
    return value as T | null
  }

  async set<T>(key: string, value: T, options?: { ttl?: number }): Promise<void> {
    const putOptions: KVNamespacePutOptions = {}
    
    if (options?.ttl) {
      putOptions.expirationTtl = options.ttl
    }

    await this.kv.put(key, JSON.stringify(value), putOptions)
  }

  async delete(key: string): Promise<void> {
    await this.kv.delete(key)
  }

  async list(prefix?: string): Promise<KVNamespaceListResult<unknown, string>> {
    return this.kv.list({ prefix })
  }
}

// Usage
async function handleUserData(request: Request, env: Env): Promise<Response> {
  const kvService = new KVService(env.MY_KV)
  const url = new URL(request.url)
  const userId = url.pathname.split('/').pop()

  if (request.method === 'GET') {
    const user = await kvService.get(`user:${userId}`)
    if (!user) {
      return new Response('User not found', { status: 404 })
    }
    return Response.json(user)
  }

  if (request.method === 'POST') {
    const userData = await request.json()
    await kvService.set(`user:${userId}`, userData, { ttl: 3600 })
    return Response.json({ success: true })
  }

  return new Response('Method not allowed', { status: 405 })
}
```

### Caching Strategy
```typescript
// src/cache.ts
export class WorkerCache {
  constructor(private kv: KVNamespace) {}

  async getOrSet<T>(
    key: string,
    fetcher: () => Promise<T>,
    ttl: number = 3600
  ): Promise<T> {
    // Try to get from cache first
    const cached = await this.kv.get(key, 'json')
    if (cached) {
      return cached as T
    }

    // Fetch fresh data
    const data = await fetcher()
    
    // Store in cache
    await this.kv.put(key, JSON.stringify(data), { expirationTtl: ttl })
    
    return data
  }

  async invalidate(pattern: string): Promise<void> {
    const list = await this.kv.list({ prefix: pattern })
    
    for (const key of list.keys) {
      await this.kv.delete(key.name)
    }
  }
}

// Usage
const cache = new WorkerCache(env.MY_KV)

const apiData = await cache.getOrSet(
  'api:external-data',
  async () => {
    const response = await fetch('https://api.example.com/data')
    return response.json()
  },
  1800 // 30 minutes
)
```

## D1 Database Operations

### Database Setup
```typescript
// src/db.ts
export class DatabaseService {
  constructor(private db: D1Database) {}

  async getUser(id: string) {
    const result = await this.db.prepare(
      'SELECT * FROM users WHERE id = ?'
    ).bind(id).first()
    
    return result
  }

  async createUser(userData: { name: string; email: string }) {
    const result = await this.db.prepare(
      'INSERT INTO users (name, email) VALUES (?, ?) RETURNING *'
    ).bind(userData.name, userData.email).first()
    
    return result
  }

  async updateUser(id: string, userData: Partial<{ name: string; email: string }>) {
    const setClauses = []
    const values = []
    
    if (userData.name) {
      setClauses.push('name = ?')
      values.push(userData.name)
    }
    
    if (userData.email) {
      setClauses.push('email = ?')
      values.push(userData.email)
    }
    
    values.push(id)
    
    const result = await this.db.prepare(
      `UPDATE users SET ${setClauses.join(', ')} WHERE id = ? RETURNING *`
    ).bind(...values).first()
    
    return result
  }

  async deleteUser(id: string) {
    await this.db.prepare('DELETE FROM users WHERE id = ?').bind(id).run()
  }

  async listUsers(limit: number = 50, offset: number = 0) {
    const result = await this.db.prepare(
      'SELECT * FROM users ORDER BY created_at DESC LIMIT ? OFFSET ?'
    ).bind(limit, offset).all()
    
    return result.results
  }
}
```

### Batch Operations
```typescript
// src/batch-operations.ts
export async function batchInsertUsers(
  db: D1Database, 
  users: Array<{ name: string; email: string }>
): Promise<void> {
  const stmt = db.prepare('INSERT INTO users (name, email) VALUES (?, ?)')
  
  const batch = users.map(user => stmt.bind(user.name, user.email))
  
  await db.batch(batch)
}

export async function transactionExample(db: D1Database): Promise<void> {
  const info = await db.batch([
    db.prepare('UPDATE accounts SET balance = balance - ? WHERE id = ?').bind(100, 'account1'),
    db.prepare('UPDATE accounts SET balance = balance + ? WHERE id = ?').bind(100, 'account2'),
    db.prepare('INSERT INTO transactions (from_account, to_account, amount) VALUES (?, ?, ?)').bind('account1', 'account2', 100)
  ])
  
  console.log('Transaction completed:', info)
}
```

## R2 Storage Operations

### File Operations
```typescript
// src/r2-service.ts
export class R2Service {
  constructor(private bucket: R2Bucket) {}

  async uploadFile(key: string, file: File): Promise<void> {
    await this.bucket.put(key, file.stream(), {
      httpMetadata: {
        contentType: file.type,
        contentLength: file.size,
      },
    })
  }

  async uploadBuffer(key: string, buffer: ArrayBuffer, contentType: string): Promise<void> {
    await this.bucket.put(key, buffer, {
      httpMetadata: {
        contentType,
        contentLength: buffer.byteLength,
      },
    })
  }

  async getFile(key: string): Promise<R2ObjectBody | null> {
    return this.bucket.get(key)
  }

  async deleteFile(key: string): Promise<void> {
    await this.bucket.delete(key)
  }

  async listFiles(prefix?: string): Promise<R2Objects> {
    return this.bucket.list({ prefix })
  }

  async generateSignedUrl(key: string, expiresIn: number = 3600): Promise<string> {
    const object = await this.bucket.get(key)
    if (!object) {
      throw new Error('Object not found')
    }

    // Note: Cloudflare R2 doesn't support signed URLs directly
    // You would need to implement your own token-based system
    return `/api/files/${key}?token=${await this.generateAccessToken(key, expiresIn)}`
  }

  private async generateAccessToken(key: string, expiresIn: number): Promise<string> {
    // Implement your own token generation logic
    const payload = {
      key,
      exp: Math.floor(Date.now() / 1000) + expiresIn,
    }
    
    // Use crypto.subtle to sign the token
    return btoa(JSON.stringify(payload))
  }
}
```

### Image Processing
```typescript
// src/image-service.ts
export async function handleImageUpload(request: Request, env: Env): Promise<Response> {
  if (request.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  const formData = await request.formData()
  const file = formData.get('image') as File
  
  if (!file) {
    return new Response('No file uploaded', { status: 400 })
  }

  // Validate file type
  if (!file.type.startsWith('image/')) {
    return new Response('Invalid file type', { status: 400 })
  }

  // Generate unique filename
  const filename = `${crypto.randomUUID()}.${file.name.split('.').pop()}`
  
  const r2Service = new R2Service(env.MY_BUCKET)
  await r2Service.uploadFile(`images/${filename}`, file)

  return Response.json({
    success: true,
    filename,
    url: `/api/images/${filename}`,
  })
}

export async function handleImageServe(request: Request, env: Env): Promise<Response> {
  const url = new URL(request.url)
  const filename = url.pathname.split('/').pop()
  
  if (!filename) {
    return new Response('Invalid filename', { status: 400 })
  }

  const r2Service = new R2Service(env.MY_BUCKET)
  const object = await r2Service.getFile(`images/${filename}`)
  
  if (!object) {
    return new Response('Image not found', { status: 404 })
  }

  return new Response(object.body, {
    headers: {
      'Content-Type': object.httpMetadata?.contentType || 'image/jpeg',
      'Cache-Control': 'public, max-age=31536000', // 1 year
      'ETag': object.etag,
    },
  })
}
```

## Authentication & Security

### JWT Authentication
```typescript
// src/auth.ts
import { SignJWT, jwtVerify } from 'jose'

export class AuthService {
  private secret: Uint8Array

  constructor(secretKey: string) {
    this.secret = new TextEncoder().encode(secretKey)
  }

  async generateToken(payload: Record<string, any>, expiresIn: string = '1h'): Promise<string> {
    const jwt = await new SignJWT(payload)
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime(expiresIn)
      .sign(this.secret)

    return jwt
  }

  async verifyToken(token: string): Promise<any> {
    try {
      const { payload } = await jwtVerify(token, this.secret)
      return payload
    } catch (error) {
      throw new Error('Invalid token')
    }
  }

  async authenticateRequest(request: Request): Promise<any> {
    const authHeader = request.headers.get('Authorization')
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      throw new Error('Missing or invalid authorization header')
    }

    const token = authHeader.substring(7)
    return this.verifyToken(token)
  }
}

// Middleware
export function requireAuth(handler: (request: Request, env: Env, user: any) => Promise<Response>) {
  return async (request: Request, env: Env): Promise<Response> => {
    try {
      const authService = new AuthService(env.SECRET_KEY)
      const user = await authService.authenticateRequest(request)
      return handler(request, env, user)
    } catch (error) {
      return new Response('Unauthorized', { status: 401 })
    }
  }
}
```

### Rate Limiting
```typescript
// src/rate-limit.ts
export class RateLimiter {
  constructor(private kv: KVNamespace) {}

  async checkLimit(
    key: string, 
    limit: number, 
    windowSeconds: number = 60
  ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {
    const now = Math.floor(Date.now() / 1000)
    const windowStart = now - (now % windowSeconds)
    const rateLimitKey = `rate:${key}:${windowStart}`

    const current = await this.kv.get(rateLimitKey)
    const count = current ? parseInt(current) : 0

    if (count >= limit) {
      return {
        allowed: false,
        remaining: 0,
        resetTime: windowStart + windowSeconds,
      }
    }

    await this.kv.put(rateLimitKey, (count + 1).toString(), {
      expirationTtl: windowSeconds,
    })

    return {
      allowed: true,
      remaining: limit - count - 1,
      resetTime: windowStart + windowSeconds,
    }
  }
}

// Usage middleware
export function withRateLimit(
  handler: (request: Request, env: Env) => Promise<Response>,
  limit: number = 100,
  windowSeconds: number = 60
) {
  return async (request: Request, env: Env): Promise<Response> => {
    const clientIP = request.headers.get('CF-Connecting-IP') || 'unknown'
    const rateLimiter = new RateLimiter(env.MY_KV)
    
    const result = await rateLimiter.checkLimit(clientIP, limit, windowSeconds)
    
    if (!result.allowed) {
      return new Response('Rate limit exceeded', {
        status: 429,
        headers: {
          'X-RateLimit-Limit': limit.toString(),
          'X-RateLimit-Remaining': '0',
          'X-RateLimit-Reset': result.resetTime.toString(),
        },
      })
    }

    const response = await handler(request, env)
    
    response.headers.set('X-RateLimit-Limit', limit.toString())
    response.headers.set('X-RateLimit-Remaining', result.remaining.toString())
    response.headers.set('X-RateLimit-Reset', result.resetTime.toString())
    
    return response
  }
}
```

## Error Handling & Logging

### Error Handler
```typescript
// src/error-handler.ts
export class WorkerError extends Error {
  constructor(
    message: string,
    public statusCode: number = 500,
    public code?: string
  ) {
    super(message)
    this.name = 'WorkerError'
  }
}

export function handleError(error: unknown): Response {
  console.error('Worker error:', error)

  if (error instanceof WorkerError) {
    return Response.json(
      {
        error: error.message,
        code: error.code,
      },
      { status: error.statusCode }
    )
  }

  if (error instanceof Error) {
    return Response.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }

  return Response.json(
    { error: 'Unknown error' },
    { status: 500 }
  )
}

// Wrapper function
export function withErrorHandling(
  handler: (request: Request, env: Env) => Promise<Response>
) {
  return async (request: Request, env: Env): Promise<Response> => {
    try {
      return await handler(request, env)
    } catch (error) {
      return handleError(error)
    }
  }
}
```

### Structured Logging
```typescript
// src/logger.ts
export class Logger {
  constructor(private env: Env) {}

  private log(level: string, message: string, meta?: Record<string, any>) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      level,
      message,
      environment: this.env.ENVIRONMENT,
      ...meta,
    }

    console.log(JSON.stringify(logEntry))
  }

  info(message: string, meta?: Record<string, any>) {
    this.log('info', message, meta)
  }

  error(message: string, meta?: Record<string, any>) {
    this.log('error', message, meta)
  }

  warn(message: string, meta?: Record<string, any>) {
    this.log('warn', message, meta)
  }

  debug(message: string, meta?: Record<string, any>) {
    if (this.env.DEBUG === 'true') {
      this.log('debug', message, meta)
    }
  }
}
```

## Deployment & Testing

### Testing Setup
```typescript
// test/worker.test.ts
import { unstable_dev } from 'wrangler'
import type { UnstableDevWorker } from 'wrangler'

describe('Worker Tests', () => {
  let worker: UnstableDevWorker

  beforeAll(async () => {
    worker = await unstable_dev('src/index.ts', {
      experimental: { disableExperimentalWarning: true },
    })
  })

  afterAll(async () => {
    await worker.stop()
  })

  test('should return hello world', async () => {
    const resp = await worker.fetch('/')
    expect(resp.status).toBe(200)
    
    const text = await resp.text()
    expect(text).toBe('Hello World!')
  })

  test('should handle API requests', async () => {
    const resp = await worker.fetch('/api/health')
    expect(resp.status).toBe(200)
    
    const data = await resp.json()
    expect(data.status).toBe('ok')
  })
})
```

### CI/CD Pipeline
```yaml
# .github/workflows/deploy.yml
name: Deploy Worker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
```

## Best Practices

1. **Use TypeScript for better development experience**
2. **Implement proper error handling and logging**
3. **Use KV for caching and session storage**
4. **Implement rate limiting for public APIs**
5. **Use D1 for relational data storage**
6. **Optimize for edge performance with minimal dependencies**
7. **Implement proper authentication and authorization**
8. **Use R2 for file storage and static assets**
9. **Monitor performance with Cloudflare Analytics**
10. **Test thoroughly before deployment**
