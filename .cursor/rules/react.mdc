---
description:
globs:
alwaysApply: false
---
---
rule_type: auto_attached
title: React Development Rules
description: React component patterns and best practices
patterns: ["**/*.{jsx,tsx}", "**/components/**/*.{js,ts}", "**/hooks/**/*.{js,ts}"]
---

# React Development Rules

## Component Patterns

### Functional Components
```typescript
// Basic functional component
interface Props {
  title: string
  count?: number
  onIncrement: () => void
}

export function Counter({ title, count = 0, onIncrement }: Props) {
  return (
    <div>
      <h2>{title}</h2>
      <p>Count: {count}</p>
      <button onClick={onIncrement}>Increment</button>
    </div>
  )
}

// With children
interface ContainerProps {
  children: React.ReactNode
  className?: string
}

export function Container({ children, className }: ContainerProps) {
  return (
    <div className={`container ${className || ''}`}>
      {children}
    </div>
  )
}
```

### Component Composition
```typescript
// Compound component pattern
interface CardProps {
  children: React.ReactNode
  className?: string
}

interface CardHeaderProps {
  children: React.ReactNode
}

interface CardBodyProps {
  children: React.ReactNode
}

function Card({ children, className }: CardProps) {
  return (
    <div className={`card ${className || ''}`}>
      {children}
    </div>
  )
}

Card.Header = function CardHeader({ children }: CardHeaderProps) {
  return <div className="card-header">{children}</div>
}

Card.Body = function CardBody({ children }: CardBodyProps) {
  return <div className="card-body">{children}</div>
}

// Usage
<Card>
  <Card.Header>Title</Card.Header>
  <Card.Body>Content</Card.Body>
</Card>
```

### Render Props Pattern
```typescript
interface RenderProps<T> {
  children: (data: T, loading: boolean, error?: Error) => React.ReactNode
}

function DataFetcher<T>({ url, children }: { url: string } & RenderProps<T>) {
  const [data, setData] = useState<T | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<Error>()

  useEffect(() => {
    fetch(url)
      .then(res => res.json())
      .then(setData)
      .catch(setError)
      .finally(() => setLoading(false))
  }, [url])

  return <>{children(data, loading, error)}</>
}

// Usage
<DataFetcher<User> url="/api/user">
  {(user, loading, error) => {
    if (loading) return <div>Loading...</div>
    if (error) return <div>Error: {error.message}</div>
    return <div>Hello {user?.name}</div>
  }}
</DataFetcher>
```

## Custom Hooks

### Data Fetching Hook
```typescript
interface UseFetchResult<T> {
  data: T | null
  loading: boolean
  error: Error | null
  refetch: () => void
}

function useFetch<T>(url: string): UseFetchResult<T> {
  const [data, setData] = useState<T | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const result = await response.json()
      setData(result)
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Unknown error'))
    } finally {
      setLoading(false)
    }
  }, [url])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return { data, loading, error, refetch: fetchData }
}
```

### Local Storage Hook
```typescript
function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }
    
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.log(error)
      return initialValue
    }
  })

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      setStoredValue(valueToStore)
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      console.log(error)
    }
  }

  return [storedValue, setValue]
}
```

### Debounce Hook
```typescript
function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value)

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)

    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])

  return debouncedValue
}

// Usage
function SearchInput() {
  const [searchTerm, setSearchTerm] = useState('')
  const debouncedSearchTerm = useDebounce(searchTerm, 300)

  useEffect(() => {
    if (debouncedSearchTerm) {
      // Perform search
      console.log('Searching for:', debouncedSearchTerm)
    }
  }, [debouncedSearchTerm])

  return (
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search..."
    />
  )
}
```

## Performance Optimization

### React.memo
```typescript
interface ExpensiveComponentProps {
  data: ComplexData[]
  onItemClick: (id: string) => void
}

const ExpensiveComponent = React.memo<ExpensiveComponentProps>(
  ({ data, onItemClick }) => {
    console.log('ExpensiveComponent rendered')
    
    return (
      <div>
        {data.map(item => (
          <div key={item.id} onClick={() => onItemClick(item.id)}>
            {item.name}
          </div>
        ))}
      </div>
    )
  },
  (prevProps, nextProps) => {
    // Custom comparison function
    return (
      prevProps.data.length === nextProps.data.length &&
      prevProps.onItemClick === nextProps.onItemClick
    )
  }
)
```

### useMemo and useCallback
```typescript
function ProductList({ products, searchTerm, onProductSelect }: Props) {
  // Memoize expensive calculations
  const filteredProducts = useMemo(() => {
    return products.filter(product =>
      product.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
  }, [products, searchTerm])

  const sortedProducts = useMemo(() => {
    return [...filteredProducts].sort((a, b) => a.name.localeCompare(b.name))
  }, [filteredProducts])

  // Memoize callback functions
  const handleProductClick = useCallback((productId: string) => {
    onProductSelect(productId)
  }, [onProductSelect])

  const handleAddToCart = useCallback((product: Product) => {
    // Add to cart logic
  }, [])

  return (
    <div>
      {sortedProducts.map(product => (
        <ProductItem
          key={product.id}
          product={product}
          onClick={handleProductClick}
          onAddToCart={handleAddToCart}
        />
      ))}
    </div>
  )
}
```

### Code Splitting with Lazy
```typescript
// Lazy load components
const LazyDashboard = React.lazy(() => import('./Dashboard'))
const LazyProfile = React.lazy(() => import('./Profile'))

function App() {
  return (
    <Router>
      <Suspense fallback={<div>Loading...</div>}>
        <Routes>
          <Route path="/dashboard" element={<LazyDashboard />} />
          <Route path="/profile" element={<LazyProfile />} />
        </Routes>
      </Suspense>
    </Router>
  )
}
```

## State Management

### useReducer for Complex State
```typescript
interface State {
  count: number
  history: number[]
  status: 'idle' | 'loading' | 'success' | 'error'
}

type Action =
  | { type: 'increment' }
  | { type: 'decrement' }
  | { type: 'reset' }
  | { type: 'set'; payload: number }
  | { type: 'set_status'; payload: State['status'] }

function counterReducer(state: State, action: Action): State {
  switch (action.type) {
    case 'increment':
      return {
        ...state,
        count: state.count + 1,
        history: [...state.history, state.count + 1],
      }
    case 'decrement':
      return {
        ...state,
        count: state.count - 1,
        history: [...state.history, state.count - 1],
      }
    case 'reset':
      return {
        count: 0,
        history: [0],
        status: 'idle',
      }
    case 'set':
      return {
        ...state,
        count: action.payload,
        history: [...state.history, action.payload],
      }
    case 'set_status':
      return {
        ...state,
        status: action.payload,
      }
    default:
      return state
  }
}

function Counter() {
  const [state, dispatch] = useReducer(counterReducer, {
    count: 0,
    history: [0],
    status: 'idle',
  })

  return (
    <div>
      <p>Count: {state.count}</p>
      <p>Status: {state.status}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
    </div>
  )
}
```

### Context Pattern
```typescript
// Create context with type safety
interface AuthContextType {
  user: User | null
  login: (email: string, password: string) => Promise<void>
  logout: () => void
  loading: boolean
}

const AuthContext = createContext<AuthContextType | null>(null)

// Provider component
export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  const login = async (email: string, password: string) => {
    setLoading(true)
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      })
      const user = await response.json()
      setUser(user)
    } finally {
      setLoading(false)
    }
  }

  const logout = () => {
    setUser(null)
  }

  const value = {
    user,
    login,
    logout,
    loading,
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// Custom hook
export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
```

## Error Boundaries

### Error Boundary Component
```typescript
interface ErrorBoundaryState {
  hasError: boolean
  error?: Error
}

class ErrorBoundary extends Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)
    // Log to error reporting service
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-fallback">
          <h2>Something went wrong.</h2>
          <p>{this.state.error?.message}</p>
          <button onClick={() => this.setState({ hasError: false })}>
            Try again
          </button>
        </div>
      )
    }

    return this.props.children
  }
}

// Functional error boundary (React 18+)
function ErrorFallback({ error, resetError }: { error: Error; resetError: () => void }) {
  return (
    <div role="alert">
      <h2>Something went wrong:</h2>
      <pre>{error.message}</pre>
      <button onClick={resetError}>Try again</button>
    </div>
  )
}
```

## Form Handling

### Controlled Components
```typescript
interface FormData {
  name: string
  email: string
  age: number
}

function ContactForm() {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    age: 0,
  })
  const [errors, setErrors] = useState<Partial<FormData>>({})

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? Number(value) : value,
    }))
    
    // Clear error when user starts typing
    if (errors[name as keyof FormData]) {
      setErrors(prev => ({ ...prev, [name]: undefined }))
    }
  }

  const validate = (): boolean => {
    const newErrors: Partial<FormData> = {}
    
    if (!formData.name.trim()) {
      newErrors.name = 'Name is required'
    }
    
    if (!formData.email.includes('@')) {
      newErrors.email = 'Valid email is required'
    }
    
    if (formData.age < 0 || formData.age > 120) {
      newErrors.age = 'Age must be between 0 and 120'
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (validate()) {
      console.log('Form submitted:', formData)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          placeholder="Name"
        />
        {errors.name && <span className="error">{errors.name}</span>}
      </div>
      
      <div>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          placeholder="Email"
        />
        {errors.email && <span className="error">{errors.email}</span>}
      </div>
      
      <div>
        <input
          type="number"
          name="age"
          value={formData.age}
          onChange={handleChange}
          placeholder="Age"
        />
        {errors.age && <span className="error">{errors.age}</span>}
      </div>
      
      <button type="submit">Submit</button>
    </form>
  )
}
```

## Testing Patterns

### Component Testing
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { Counter } from './Counter'

describe('Counter Component', () => {
  test('renders initial count', () => {
    render(<Counter initialCount={5} />)
    expect(screen.getByText('Count: 5')).toBeInTheDocument()
  })

  test('increments count when button clicked', () => {
    render(<Counter initialCount={0} />)
    const button = screen.getByRole('button', { name: /increment/i })
    
    fireEvent.click(button)
    expect(screen.getByText('Count: 1')).toBeInTheDocument()
  })

  test('calls onCountChange prop', () => {
    const mockOnCountChange = jest.fn()
    render(<Counter initialCount={0} onCountChange={mockOnCountChange} />)
    
    const button = screen.getByRole('button', { name: /increment/i })
    fireEvent.click(button)
    
    expect(mockOnCountChange).toHaveBeenCalledWith(1)
  })
})

// Hook testing
import { renderHook, act } from '@testing-library/react'
import { useCounter } from './useCounter'

describe('useCounter Hook', () => {
  test('should increment counter', () => {
    const { result } = renderHook(() => useCounter(0))
    
    act(() => {
      result.current.increment()
    })
    
    expect(result.current.count).toBe(1)
  })
})
```

## Best Practices

1. **Use TypeScript for better development experience**
2. **Keep components small and focused**
3. **Use custom hooks to share logic**
4. **Memoize expensive calculations with useMemo**
5. **Memoize callback functions with useCallback**
6. **Use React.memo for expensive components**
7. **Implement proper error boundaries**
8. **Use context sparingly - prefer prop drilling for simple cases**
9. **Write comprehensive tests for components and hooks**
10. **Follow the principle of single responsibility**
